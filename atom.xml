<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jtobin.ca]]></title>
  <link href="http://jtobin.ca/atom.xml" rel="self"/>
  <link href="http://jtobin.ca/"/>
  <updated>2014-05-31T18:10:34+10:00</updated>
  <id>http://jtobin.ca/</id>
  <author>
    <name><![CDATA[Jared Tobin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sharing in Haskell EDSLs]]></title>
    <link href="http://jtobin.ca/blog/2014/05/30/sharing-in-haskell-edsls/"/>
    <updated>2014-05-30T09:37:53+10:00</updated>
    <id>http://jtobin.ca/blog/2014/05/30/sharing-in-haskell-edsls</id>
    <content type="html"><![CDATA[<p>Lately I’ve been trying to do some magic by way of nonstandard interpretations
of abstract syntax.  One of the things that I’ve managed to grok along the way
has been the problem of <em>sharing</em> in deeply-embedded languages.</p>

<p>Here’s a simple illustration of the ‘vanilla’ sharing problem by way of plain
Haskell; a function that computes 2^n:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">naiveTree</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">b</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class="line"><span class="nf">naiveTree</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">naiveTree</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">naiveTree</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">naiveTree</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This naive implementation is a poor way to roll as it is exponentially complex
in n.  Look at how evaluation proceeds for something like <code>naiveTree 4</code>:</p>

<pre><code>&gt; naiveTree 4
&gt; naiveTree 3 + naiveTree 3
&gt; naiveTree 2 + naiveTree 2 + naiveTree 2 + naiveTree 2
&gt; naiveTree 1 + naiveTree 1 + naiveTree 1 + naiveTree 1
  + naiveTree 1 + naiveTree 1 + naiveTree 1 + naiveTree 1
&gt; naiveTree 0 + naiveTree 0 + naiveTree 0 + naiveTree 0
  + naiveTree 0 + naiveTree 0 + naiveTree 0 + naiveTree 0
  + naiveTree 0 + naiveTree 0 + naiveTree 0 + naiveTree 0
  + naiveTree 0 + naiveTree 0 + naiveTree 0 + naiveTree 0
&gt; 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
&gt; 16
</code></pre>

<p>Each recursive call doubles the number of function evaluations we need to make.
Don’t wait up for <code>naiveTree 50</code> to return a value.</p>

<p>A better way to write this function would be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">tree</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">b</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class="line"><span class="nf">tree</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">tree</span> <span class="n">n</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">shared</span> <span class="ow">=</span> <span class="n">tree</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="kr">in</span>  <span class="n">shared</span> <span class="o">+</span> <span class="n">shared</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here we store solutions to subproblems, and thus avoid having to recompute
things over and over.  Look at how <code>tree 4</code> proceeds now:</p>

<pre><code>&gt; tree 4
&gt; let shared0 =
      let shared1 = 
          let shared2 =
              let shared3 = 1 
              in  shared3 + shared3
          in  shared2 + shared2
      in  shared1 + shared1
  in  shared0 + shared0
&gt; let shared0 =
      let shared1 = 
          let shared2 = 2
          in  shared2 + shared2
      in  shared1 + shared1
  in  shared0 + shared0
&gt; let shared0 =
      let shared1 = 4
      in  shared1 + shared1
  in  shared0 + shared0
&gt; let shared0 = 8
  in  shared0 + shared0
&gt; 16
</code></pre>

<p>You could say that Haskell’s <code>let</code> syntax enables <em>sharing</em> between
computations; using it reduces the complexity of our tree implementation from
$O(2^n)$ to $O(n)$.  <code>tree 50</code> now returns instantly:</p>

<pre><code>&gt; tree 50
1125899906842624
</code></pre>

<p>So let’s move everything over to an abstract syntax setting and see how the
results translate there.</p>

<p>Let’s start with a minimalist language, known in some circles as Hutton’s
Razor.  While puny, it is sufficiently expressive to illustrate the subtleties
of this whole sharing business:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Expr</span> <span class="ow">=</span>
</span><span class="line">    <span class="kt">Lit</span> <span class="kt">Int</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">Add</span> <span class="kt">Expr</span> <span class="kt">Expr</span>
</span><span class="line">  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Ord</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span> <span class="kt">Num</span> <span class="kt">Expr</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">fromInteger</span> <span class="ow">=</span> <span class="kt">Lit</span> <span class="o">.</span> <span class="n">fromInteger</span>
</span><span class="line">  <span class="p">(</span><span class="o">+</span><span class="p">)</span>         <span class="ow">=</span> <span class="kt">Add</span>
</span><span class="line">
</span><span class="line"><span class="nf">eval</span> <span class="ow">::</span> <span class="kt">Expr</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Lit</span> <span class="n">d</span><span class="p">)</span>     <span class="ow">=</span> <span class="n">d</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="ow">=</span> <span class="n">eval</span> <span class="n">e0</span> <span class="o">+</span> <span class="n">eval</span> <span class="n">e1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’ve provided a <code>Num</code> instance so that we can conveniently write expressions in
this language.  We can use conventional notation and extract abstract syntax
for free by specifying a particular type signature:</p>

<pre><code>&gt; 1 + 1 :: Expr
Add (Lit 1) (Lit 1)
</code></pre>

<p>And of course we can use <code>eval</code> to evaluate things:</p>

<pre><code>&gt; eval (1 + 1 :: Expr)
2
</code></pre>

<p>Due to the <code>Num</code> instance and the polymorphic definitions of <code>naiveTree</code> and
<code>tree</code>, these functions will automatically work on our expression type.  Check
them out:</p>

<pre><code>&gt; naiveTree 2 :: Expr
Add (Add (Lit 1) (Lit 1)) (Add (Lit 1) (Lit 1))

&gt; tree 2 :: Expr
Add (Add (Lit 1) (Lit 1)) (Add (Lit 1) (Lit 1))
</code></pre>

<p>Notice there’s a quirk here: each of these functions - having wildly different
complexities - yields the same abstract syntax, implying that <code>tree</code> is no
more efficient than <code>naiveTree</code> when it comes to dealing with this expression
type.  That means..</p>

<pre><code>&gt; eval (tree 50 :: Expr)
-- ain't happening
</code></pre>

<p>So there is a big problem here: Haskell’s <code>let</code> syntax doesn’t carry its
sharing over to our embedded language.  Equivalently, the embedded language is
<em>not expressive enough</em> to represent sharing in its own abstract syntax.</p>

<p>There are a few ways to get around this.</p>

<h2 id="memoizing-evaluation">Memoizing Evaluation</h2>

<p>For some interpretations (like evaluation) we can use a memoization library.
Here we can use <code>Data.StableMemo</code> to define a clean and simple evaluator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">Data.StableMemo</span>
</span><span class="line">
</span><span class="line"><span class="nf">memoEval</span> <span class="ow">::</span> <span class="kt">Expr</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">memoEval</span> <span class="ow">=</span> <span class="n">go</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">go</span> <span class="ow">=</span> <span class="n">memo</span> <span class="n">eval</span>
</span><span class="line">  <span class="n">eval</span> <span class="p">(</span><span class="kt">Lit</span> <span class="n">i</span><span class="p">)</span>     <span class="ow">=</span> <span class="n">i</span>
</span><span class="line">  <span class="n">eval</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="ow">=</span> <span class="n">go</span> <span class="n">e0</span> <span class="o">+</span> <span class="n">go</span> <span class="n">e1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This will very conveniently handle any grimy details of caching intermediate
computations.  It passes the <code>tree 50</code> test just fine:</p>

<pre><code>&gt; memoEval (tree 50 :: Expr)
1125899906842624
</code></pre>

<p>Some other interpretations are still inefficient; a similar <code>memoPrint</code>
function will still dump out a massive syntax tree due to the limited
expressiveness of the embedded language.  The memoizer doesn’t really allow us
to <em>observe</em> sharing, if we’re interested in doing that for some reason.</p>

<h2 id="observing-implicit-sharing">Observing Implicit Sharing</h2>

<p>We can actually use GHC’s internal sharing analysis to recover any implicit
sharing present in an embedded expression.  This is the technique introduced by
Andy Gill’s <a href="http://www.cs.uu.nl/wiki/pub/Afp/CourseLiterature/Gill-09-TypeSafeReification.pdf">Type Safe Observable Sharing In
Haskell</a>
and implemented in the <code>data-reify</code> library on
<a href="http://hackage.haskell.org/package/data-reify">Hackage</a>.  It’s as
technically unsafe as it sounds, but in practice has the benefits of being both
relatively benign and minimally intrusive on the existing language.</p>

<p>Here is the extra machinery required to observe implicit sharing in our <code>Expr</code>
type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="cm">{-# LANGUAGE DeriveFunctor #-}</span>
</span><span class="line"><span class="cm">{-# LANGUAGE TypeFamilies #-}</span>
</span><span class="line">
</span><span class="line"><span class="kr">import</span> <span class="nn">Control.Applicative</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Data.Reify</span> <span class="k">hiding</span> <span class="p">(</span><span class="kt">Graph</span><span class="p">)</span>
</span><span class="line"><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Reify</span> <span class="k">as</span> <span class="n">Reify</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">System.IO.Unsafe</span>
</span><span class="line">
</span><span class="line"><span class="kr">data</span> <span class="kt">ExprF</span> <span class="n">e</span> <span class="ow">=</span>
</span><span class="line">    <span class="kt">LitF</span> <span class="kt">Int</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">AddF</span> <span class="n">e</span> <span class="n">e</span>
</span><span class="line">  <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Ord</span><span class="p">,</span> <span class="kt">Show</span><span class="p">,</span> <span class="kt">Functor</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span> <span class="kt">MuRef</span> <span class="kt">Expr</span> <span class="kr">where</span>
</span><span class="line">  <span class="kr">type</span> <span class="kt">DeRef</span> <span class="kt">Expr</span>        <span class="ow">=</span> <span class="kt">ExprF</span>
</span><span class="line">  <span class="n">mapDeRef</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">AddF</span> <span class="o">&lt;$&gt;</span> <span class="n">f</span> <span class="n">e0</span> <span class="o">&lt;*&gt;</span> <span class="n">f</span> <span class="n">e1</span>
</span><span class="line">  <span class="n">mapDeRef</span> <span class="kr">_</span> <span class="p">(</span><span class="kt">Lit</span> <span class="n">v</span><span class="p">)</span>     <span class="ow">=</span> <span class="n">pure</span> <span class="p">(</span><span class="kt">LitF</span> <span class="n">v</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We need to make <code>Expr</code> an instance of the <code>MuRef</code> class, which loosely provides
a mapping between the <code>Expr</code> and <code>ExprF</code> types.  <code>ExprF</code> itself is a so-called
‘pattern functor’, which is a parameterized type in which recursive points are
indicated by the parameter.  We need the <code>TypeFamilies</code> pragma for
instantiating the <code>MuRef</code> class, and <code>DeriveFunctor</code> eliminates the need to
manually instantiate a <code>Functor</code> instance for <code>ExprF</code>.</p>

<p>Writing <code>MuRef</code> instances is pretty easy.  For more complicated types you can
often use <code>Data.Traversable.traverse</code> in order to provide the required
implementation for <code>mapDeRef</code>
(<a href="https://stackoverflow.com/questions/23825800/how-to-define-a-muref-instance-for-this-nontrivial-expression-type">example</a>).</p>

<p>With this in place we can use <code>reifyGraph</code> from <code>data-reify</code> in order to
observe the implicit sharing.  Let’s try this on a bite-sized <code>tree 2</code> and note
that it is an IO action:</p>

<pre><code>&gt; reifyGraph (tree 2 :: Expr)
let [(1,AddF 2 2),(2,AddF 3 3),(3,LitF 1)] in 1
</code></pre>

<p>Here we get an abstract syntax <em>graph</em> - rather than a tree - and sharing has
been made explicit.</p>

<p>We can write an interpreter for expressions by internally reifying them as
graphs and then working on those.  <code>reifyGraph</code> is an IO action, but since its
effects are pretty tame I don’t feel too bad about wrapping calls to it in
<code>unsafePerformIO</code>.  Interpreting these graphs must be handled a little
differently from interpreting a tree; a naive ‘tree-like’ evaluator 
will eliminate sharing undesirably:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">naiveEval</span> <span class="ow">::</span> <span class="kt">Expr</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">naiveEval</span> <span class="n">expr</span> <span class="ow">=</span> <span class="n">gEval</span> <span class="n">reified</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">reified</span> <span class="ow">=</span> <span class="n">unsafePerformIO</span> <span class="o">$</span> <span class="n">reifyGraph</span> <span class="n">expr</span>
</span><span class="line">  <span class="n">gEval</span> <span class="p">(</span><span class="kt">Reify</span><span class="o">.</span><span class="kt">Graph</span> <span class="n">env</span> <span class="n">r</span><span class="p">)</span> <span class="ow">=</span> <span class="n">go</span> <span class="n">r</span> <span class="kr">where</span>
</span><span class="line">    <span class="n">go</span> <span class="n">j</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">lookup</span> <span class="n">j</span> <span class="n">env</span> <span class="kr">of</span>
</span><span class="line">      <span class="kt">Just</span> <span class="p">(</span><span class="kt">AddF</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">go</span> <span class="n">a</span> <span class="o">+</span> <span class="n">go</span> <span class="n">b</span>
</span><span class="line">      <span class="kt">Just</span> <span class="p">(</span><span class="kt">LitF</span> <span class="n">d</span><span class="p">)</span>   <span class="ow">-&gt;</span> <span class="n">d</span>
</span><span class="line">      <span class="kt">Nothing</span>         <span class="ow">-&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This evaluator fails the <code>tree 50</code> test:</p>

<pre><code>&gt; naiveEval (tree 50)
-- hang
</code></pre>

<p>We need to use a more appropriately graph-y method to traverse and interpret
this (directed, acyclic) graph.  Here’s an idea:</p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Topological_sorting">topologically sort</a> the
graph, yielding a linear ordering of vertices such that for every edge
$u \to v$, $v$ is ordered before $u$.</li>
  <li>iterate through the sorted vertices, interpreting them as desired and storing
the interpretation</li>
  <li>look up the previously-interpreted vertices as needed</li>
</ul>

<p>We can use the <code>Data.Graph</code> module from the <code>containers</code> library to deal with
the topological sorting and vertex lookups.  The following graph-based
evaluator gets the job done:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">import</span> <span class="nn">Data.Graph</span>
</span><span class="line"><span class="kr">import</span> <span class="nn">Data.Maybe</span>
</span><span class="line">
</span><span class="line"><span class="nf">graphEval</span> <span class="ow">::</span> <span class="kt">Expr</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">graphEval</span> <span class="n">expr</span> <span class="ow">=</span> <span class="n">consume</span> <span class="n">reified</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">reified</span> <span class="ow">=</span> <span class="n">unsafePerformIO</span> <span class="p">(</span><span class="n">toGraph</span> <span class="o">&lt;$&gt;</span> <span class="n">reifyGraph</span> <span class="n">expr</span><span class="p">)</span>
</span><span class="line">  <span class="n">toGraph</span> <span class="p">(</span><span class="kt">Reify</span><span class="o">.</span><span class="kt">Graph</span> <span class="n">env</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">=</span> <span class="n">graphFromEdges</span> <span class="o">.</span> <span class="n">map</span> <span class="n">toNode</span> <span class="o">$</span> <span class="n">env</span>
</span><span class="line">  <span class="n">toNode</span> <span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="kt">AddF</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">AddF</span> <span class="n">a</span> <span class="n">b</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">])</span>
</span><span class="line">  <span class="n">toNode</span> <span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="kt">LitF</span> <span class="n">d</span><span class="p">)</span>   <span class="ow">=</span> <span class="p">(</span><span class="kt">LitF</span> <span class="n">d</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="kt">[]</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">consume</span> <span class="ow">::</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="kt">Graph</span><span class="p">,</span> <span class="kt">Vertex</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">ExprF</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">consume</span> <span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">vmap</span><span class="p">,</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">=</span> <span class="n">go</span> <span class="p">(</span><span class="n">reverse</span> <span class="o">.</span> <span class="n">topSort</span> <span class="o">$</span> <span class="n">g</span><span class="p">)</span> <span class="kt">[]</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">go</span> <span class="kt">[]</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">head</span> <span class="n">acc</span>
</span><span class="line">  <span class="n">go</span> <span class="p">(</span><span class="n">v</span><span class="kt">:</span><span class="n">vs</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span>
</span><span class="line">    <span class="kr">let</span> <span class="n">nacc</span> <span class="ow">=</span> <span class="n">evalNode</span> <span class="p">(</span><span class="n">vmap</span> <span class="n">v</span><span class="p">)</span> <span class="n">acc</span> <span class="kt">:</span> <span class="n">acc</span>
</span><span class="line">    <span class="kr">in</span>  <span class="n">go</span> <span class="n">vs</span> <span class="n">nacc</span>
</span><span class="line">
</span><span class="line"><span class="nf">evalNode</span> <span class="ow">::</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="kt">ExprF</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span>
</span><span class="line"><span class="nf">evalNode</span> <span class="p">(</span><span class="kt">LitF</span> <span class="n">d</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="kr">_</span><span class="p">)</span>   <span class="kr">_</span> <span class="ow">=</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">evalNode</span> <span class="p">(</span><span class="kt">AddF</span> <span class="n">a</span> <span class="n">b</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="kr">_</span><span class="p">)</span> <span class="n">l</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">v</span> <span class="ow">=</span> <span class="n">fromJust</span> <span class="p">((</span><span class="o">+</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="n">lookup</span> <span class="n">a</span> <span class="n">l</span> <span class="o">&lt;*&gt;</span> <span class="n">lookup</span> <span class="n">b</span> <span class="n">l</span><span class="p">)</span>
</span><span class="line">  <span class="kr">in</span>  <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In a serious implementation I’d want to use a more appropriate caching
structure and avoid the partial functions like <code>fromJust</code> and <code>head</code>, but you
get the point.  In any case, this evaluator passes the <code>tree 50</code> test without
issue:</p>

<pre><code>&gt; graphEval (tree 50)
1125899906842624
</code></pre>

<h2 id="making-sharing-explicit">Making Sharing Explicit</h2>

<p>Instead of working around the lack of sharing in our language, we can augment
it by adding the necessary sharing constructs.  In particular, we can add our
own let-binding that piggybacks on Haskell’s <code>let</code>.  Here’s an enhanced
language (using the same <code>Num</code> instance as before):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Expr</span> <span class="ow">=</span>
</span><span class="line">    <span class="kt">Lit</span> <span class="kt">Int</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">Add</span> <span class="kt">Expr</span> <span class="kt">Expr</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">Let</span> <span class="kt">Expr</span> <span class="p">(</span><span class="kt">Expr</span> <span class="ow">-&gt;</span> <span class="kt">Expr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The new <code>Let</code> constructor implements <em>higher-order abstract syntax</em>, or HOAS.
There are some immediate consequences of this: we can’t derive instances of our
language for typeclasses like <code>Eq</code>, <code>Ord</code>, and <code>Show</code>, and interpreting
everything becomes a bit more painful.  But, we don’t need to make any use of
<code>data-reify</code> in order to share expressions, since the language now handles that
&#8216;a la carte.  Here’s an efficient evaluator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">eval</span> <span class="ow">::</span> <span class="kt">Expr</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Lit</span> <span class="n">d</span><span class="p">)</span>     <span class="ow">=</span> <span class="n">d</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="ow">=</span> <span class="n">eval</span> <span class="n">e0</span> <span class="o">+</span> <span class="n">eval</span> <span class="n">e1</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Let</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">shared</span> <span class="ow">=</span> <span class="kt">Lit</span> <span class="p">(</span><span class="n">eval</span> <span class="n">e0</span><span class="p">)</span>
</span><span class="line">  <span class="kr">in</span>  <span class="n">eval</span> <span class="p">(</span><span class="n">e1</span> <span class="n">shared</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In particular, note that we need a sort of back-interpreter to re-embed shared
expressions into our language while interpreting them.  Here we use <code>Lit</code> to
do that, but this is more painful if we want to implement, say, a pretty
printer; in that case we need a parser such that <code>print (parse x) == x</code> (see 
<a href="https://www.cs.utexas.edu/~wcook/Drafts/2012/graphs.pdf">here</a>).</p>

<p>We also can’t use the existing <code>tree</code> function.  Here’s the HOAS equivalent,
which is no longer polymorphic in its return type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">tree</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Eq</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Expr</span>
</span><span class="line"><span class="nf">tree</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">tree</span> <span class="n">n</span> <span class="ow">=</span> <span class="kt">Let</span> <span class="p">(</span><span class="n">tree</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">\</span><span class="n">shared</span> <span class="ow">-&gt;</span> <span class="n">shared</span> <span class="o">+</span> <span class="n">shared</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using that, we can see that sharing is preserved just fine:</p>

<pre><code>&gt; eval (tree 50)
1125899906842624
</code></pre>

<p>Another way to make sharing explicit is to use a paramterized HOAS, known as
PHOAS.  This requires the greatest augmentation of the original language
(recycling the same <code>Num</code> instance):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Expr</span> <span class="n">a</span> <span class="ow">=</span>
</span><span class="line">    <span class="kt">Lit</span> <span class="kt">Int</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">Add</span> <span class="p">(</span><span class="kt">Expr</span> <span class="n">a</span><span class="p">)</span> <span class="p">(</span><span class="kt">Expr</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">Let</span> <span class="p">(</span><span class="kt">Expr</span> <span class="n">a</span><span class="p">)</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Expr</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line">  <span class="o">|</span> <span class="kt">Var</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="nf">eval</span> <span class="ow">::</span> <span class="kt">Expr</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Lit</span> <span class="n">d</span><span class="p">)</span>     <span class="ow">=</span> <span class="n">d</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Var</span> <span class="n">v</span><span class="p">)</span>     <span class="ow">=</span> <span class="n">v</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="ow">=</span> <span class="n">eval</span> <span class="n">e0</span> <span class="o">+</span> <span class="n">eval</span> <span class="n">e1</span>
</span><span class="line"><span class="nf">eval</span> <span class="p">(</span><span class="kt">Let</span> <span class="n">e</span> <span class="n">f</span><span class="p">)</span>   <span class="ow">=</span> <span class="n">eval</span> <span class="p">(</span><span class="n">f</span> <span class="p">(</span><span class="n">eval</span> <span class="n">e</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here we parameterize the expression type and add both <code>Let</code> and <code>Var</code>
constructors to the language.  Sharing expressions explicitly now takes a
slightly different form than in the HOAS version:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">tree</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Eq</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Expr</span> <span class="n">b</span>
</span><span class="line"><span class="nf">tree</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">tree</span> <span class="n">n</span> <span class="ow">=</span> <span class="kt">Let</span> <span class="p">(</span><span class="n">tree</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="p">((</span><span class="nf">\</span><span class="n">shared</span> <span class="ow">-&gt;</span> <span class="n">shared</span> <span class="o">+</span> <span class="n">shared</span><span class="p">)</span> <span class="o">.</span> <span class="kt">Var</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>Var</code> term wraps the intermediate computation, which is then passed to the
semantics-defining lambda.  Sharing is again preserved in the language:</p>

<pre><code>&gt; eval $ tree 50
1125899906842624
</code></pre>

<p>Here, however, we don’t need the same kind of back-interpreter that we did when
using HOAS.  It’s easy to write a pretty-printer that observes sharing, for
example (from <a href="http://ropas.snu.ac.kr/~bruno/papers/ASGDSL.pdf">here</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">text</span> <span class="n">e</span> <span class="ow">=</span> <span class="n">go</span> <span class="n">e</span> <span class="mi">0</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">go</span> <span class="p">(</span><span class="kt">Lit</span> <span class="n">j</span><span class="p">)</span>     <span class="kr">_</span> <span class="ow">=</span> <span class="n">show</span> <span class="n">j</span>
</span><span class="line">  <span class="n">go</span> <span class="p">(</span><span class="kt">Add</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="n">c</span> <span class="ow">=</span> <span class="s">&quot;(Add &quot;</span> <span class="o">++</span> <span class="n">go</span> <span class="n">e0</span> <span class="n">c</span> <span class="o">++</span> <span class="s">&quot; &quot;</span> <span class="o">++</span> <span class="n">go</span> <span class="n">e1</span> <span class="n">c</span> <span class="o">++</span> <span class="s">&quot;)&quot;</span>
</span><span class="line">  <span class="n">go</span> <span class="p">(</span><span class="kt">Var</span> <span class="n">x</span><span class="p">)</span> <span class="kr">_</span>     <span class="ow">=</span> <span class="n">x</span>
</span><span class="line">  <span class="n">go</span> <span class="p">(</span><span class="kt">Let</span> <span class="n">e0</span> <span class="n">e1</span><span class="p">)</span> <span class="n">c</span> <span class="ow">=</span> <span class="s">&quot;(Let &quot;</span> <span class="o">++</span> <span class="n">v</span> <span class="o">++</span> <span class="s">&quot; &quot;</span> <span class="o">++</span> <span class="n">go</span> <span class="n">e0</span> <span class="p">(</span><span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">++</span>
</span><span class="line">                     <span class="s">&quot; in &quot;</span> <span class="o">++</span> <span class="n">go</span> <span class="p">(</span><span class="n">e1</span> <span class="n">v</span><span class="p">)</span> <span class="p">(</span><span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;)&quot;</span>
</span><span class="line">    <span class="kr">where</span> <span class="n">v</span> <span class="ow">=</span> <span class="s">&quot;v&quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Which yields the following string representation of our syntax:</p>

<pre><code>&gt; putStrLn . text $ tree 2
(Let v0 (Let v1 1 in (Add v1 v1)) in (Add v0 v0))
</code></pre>

<h2 id="cluing-up">Cluing up</h2>

<p>I’ve gone over several methods of handling sharing in embedded languages:
an external memoizer, observable (implicit) sharing, and adding explicit
sharing via adding a HOAS or PHOAS let-binding to the original language.  Some
may be more convenient than others, depending on what you’re trying to do.</p>

<p>I’ve dumped code for the
<a href="https://gist.github.com/jtobin/89d741df8aaaa33eb567">minimal</a>,
<a href="https://gist.github.com/jtobin/3fc26d852af9e82e378e">HOAS</a>, and
<a href="https://gist.github.com/jtobin/e3e945f3c761cbc6ad43">PHOAS</a> examples in the
some gists.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sampling Functions and Generative Models]]></title>
    <link href="http://jtobin.ca/blog/2014/03/17/sampling-functions-vs-generative-models/"/>
    <updated>2014-03-17T08:20:55+10:00</updated>
    <id>http://jtobin.ca/blog/2014/03/17/sampling-functions-vs-generative-models</id>
    <content type="html"><![CDATA[<p>The term ‘probability distribution’ is actually pretty vague.  A probability
distribution is an abstract object that can be distinguished uniquely (i.e.
from other probability distributions) by way of any of a bunch of concrete
representations.  Probability density or mass functions, moment generating
functions, characteristic functions, cumulative distribution functions, random
variables, and measures all reify a probability distribution as something
tangible that can be worked with.  Image measures in particular are sometimes
called ‘distributions’, though they still just form a single possible
reification of the underlying concept.  In formal probability theory the term
‘law’ is often used to refer to the abstract object being characterized.</p>

<p>Different characterizations are useful when doing different kinds of work. 
Measures are useful when doing proofs.  Probability densities and mass
functions are useful for a whole whack of applications.  Moment generating
functions are useful for exercises in introductory mathematical statistics
courses.</p>

<p>Sampling functions - procedures that produce samples from some target
distribution - also characterize probability distributions uniquely.  They are
an excellent basis for introducing and transforming uncertainty in
probabilistic programming languages.  A sampling function takes as its sole
input a <em>stream of randomness</em>, which is consumed and transformed to produce a
sample from the distribution that it characterizes.  The stream can be a lazy
list or, similarly, a pseudo-random number generator.</p>

<p>Sampling functions are precursors to <em>generative models</em>: models that take both
randomness and causal inputs as arguments and produce a possible effect.
Generative models are the main currency of probabilistic programming; they
specify a mapping between hypothesized causes and a probability distribution
over effects.  Sampling functions are the basis for handling all uncertainty in
several PP implementations.</p>

<p>It’s useful to look at sampling functions and generative models to emphasize
the distinction between the two.  In Haskelly pseudocode, they have the
following types:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">samplingFunction</span> <span class="ow">::</span> <span class="kt">Randomness</span> <span class="ow">-&gt;</span> <span class="kt">Effect</span>
</span><span class="line">
</span><span class="line"><span class="nf">generativeModel</span>  <span class="ow">::</span> <span class="kt">Causes</span> <span class="ow">-&gt;</span> <span class="kt">Randomness</span> <span class="ow">-&gt;</span> <span class="kt">Effect</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s easy to see that a generative model, when provided with some causes, is
itself a sampling function.</p>

<p>We can use a monad to abstract out the provisioning of randomness and make
everything a little cleaner.  Imagine ‘Observable’ to be a monad that handles
the propagation of randomness in our functions; any type tagged with
‘Observable’ is a probability distribution over some other type (and maybe we
would run it with a function called <code>observe</code> or <code>sample</code>).  Using that, we can
write the above as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">samplingFunction</span> <span class="ow">::</span> <span class="kt">Observable</span> <span class="kt">Effect</span>
</span><span class="line">
</span><span class="line"><span class="nf">generativeModel</span>  <span class="ow">::</span> <span class="kt">Causes</span> <span class="ow">-&gt;</span> <span class="kt">Observable</span> <span class="kt">Effect</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Very clean.  Here it’s immediately clear that only difference between a
sampling function and a model is the introduction of causes to the latter.  A
generative model contains some internal logic that manipulates external causes
in some way; a sampling function does not.</p>

<p>You can see some in-progress development of this idea
<a href="http://github.com/jtobin/observable">here</a> and
<a href="http://github.com/glutamate/probably-baysig">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property Testing in Ruby]]></title>
    <link href="http://jtobin.ca/blog/2014/03/09/property-testing-in-ruby/"/>
    <updated>2014-03-09T08:09:56+10:00</updated>
    <id>http://jtobin.ca/blog/2014/03/09/property-testing-in-ruby</id>
    <content type="html"><![CDATA[<p>Testing properties of Haskell functions with
<a href="http://hackage.haskell.org/package/QuickCheck">QuickCheck</a> is easy and pretty
enjoyable.  It turns out Ruby has a QuickCheck-like property testing library
called <a href="http://github.com/hayeah/rantly">rantly</a>.</p>

<p>Let’s test the ‘greed game’ <a href="http://rubykoans.com/">Ruby koan</a>.  In the greed
game, one rolls up to five dice and calculates a score according to the
following rules:</p>

<ul>
  <li>three ones is 1000 points</li>
  <li>three of the same non-one number is worth 100 times that number</li>
  <li>a one that is not a part of a set of three is worth 100 points</li>
  <li>a five that is not a part of a set of three is worth 50 points</li>
  <li>everything else is worth one point</li>
</ul>

<p>So, for example, a roll of 1, 1, 1, 5, 1 would yield 1150 points.  A roll of
3, 4, 5, 3, 3 would yield 350 points.</p>

<p>The basic scoring mechanism can be implemented like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;rantly/property&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="n">ds</span><span class="o">.</span><span class="n">group_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">score_group</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span><span class="o">.</span><span class="n">reduce</span> <span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">score_group</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">  <span class="n">value_score</span>  <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">5</span> <span class="o">=&gt;</span> <span class="mi">50</span><span class="p">}</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class="line">  <span class="n">triple_score</span> <span class="o">=</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1000</span> <span class="p">:</span> <span class="n">k</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class="line">
</span><span class="line">  <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="o">?</span> <span class="n">triple_score</span> <span class="o">+</span> <span class="n">value_score</span> <span class="o">*</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span> <span class="p">:</span> <span class="n">value_score</span> <span class="o">*</span> <span class="n">v</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Property tests require generators to cook up requisite input data.  Some
generators we might be interested in, to start, are those to create valid dice
rolls:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">valid_roll</span>   <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Rantly</span> <span class="p">{</span> <span class="n">range</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line"><span class="n">valid_number</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Rantly</span> <span class="p">{</span> <span class="n">range</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>valid_roll</code> describes the result of an individual dice roll, while
<code>valid_number</code> describes the number of dice that can be rolled for an input
score.  <code>range</code> generates a value between its provided arguments, inclusive.
Rantly comes equipped with a bunch of primitive generators and combinators:
<code>choose</code>, <code>array</code>, <code>sized</code>, etc.</p>

<p>We can use those primitive generators to create other generators.  In
particular, a valid input to the <code>score</code> function should be a 0-to-5 length
array in which each element is between 1 and 6 inclusive; that is, an array
with length generated from <code>valid_number</code> and elements generated from
<code>valid_roll</code>.</p>

<p>Below, I’ll create that composite generator in an RSpec <code>describe</code> block and
then test a couple of properties of the <code>score</code> function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="s1">&#39;score&#39;</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="n">let</span> <span class="p">(</span><span class="ss">:rolls</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">sized</span><span class="p">(</span><span class="n">valid_number</span><span class="o">.</span><span class="n">call</span><span class="p">)</span> <span class="p">{</span> <span class="n">array</span> <span class="p">{</span> <span class="n">valid_roll</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;should be non-negative&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">property_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rolls</span><span class="p">)</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="mi">750</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">score</span> <span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;should be less than or equal to 1200&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">property_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rolls</span><span class="p">)</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="mi">750</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">score</span> <span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="o">&lt;=</span> <span class="mi">1200</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Running this code will test each of those properties on 750 random inputs
generated by the <code>rolls</code> generator.</p>

<p>One might also want to test how functions behave on invalid input.  Let’s
augment the original scoring functions with some exception handling:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span>
</span><span class="line">  <span class="nb">fail</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s1">&#39;invalid argument&#39;</span> <span class="k">unless</span> <span class="n">ds</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">begin</span>
</span><span class="line">    <span class="n">groups</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">group_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="p">}</span>
</span><span class="line">    <span class="p">(</span><span class="n">groups</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">score_group</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span><span class="o">.</span><span class="n">reduce</span> <span class="ss">:+</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class="line">    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s1">&#39;invalid argument&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">score_group</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">  <span class="nb">fail</span> <span class="no">ArgumentError</span> <span class="k">unless</span> <span class="n">k</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line">  <span class="nb">fail</span> <span class="no">ArgumentError</span> <span class="k">unless</span> <span class="n">v</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">value_score</span>  <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">5</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">}</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class="line">  <span class="n">triple_score</span> <span class="o">=</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1000</span> <span class="p">:</span> <span class="n">k</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class="line">
</span><span class="line">  <span class="n">v</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="o">?</span> <span class="n">triple_score</span> <span class="o">+</span> <span class="n">value_score</span> <span class="o">*</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span> <span class="p">:</span> <span class="n">value_score</span> <span class="o">*</span> <span class="n">v</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then add generators for invalid rolls:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">invalid_roll</span>   <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Rantly</span> <span class="p">{</span> <span class="n">choose</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line"><span class="n">invalid_number</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="no">Rantly</span> <span class="p">{</span> <span class="n">choose</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">50</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then, with the addition of two new composite generators,  we can test that the
exception handling behaves as we expect:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="s1">&#39;score&#39;</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="n">let</span><span class="p">(</span><span class="ss">:rolls</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">sized</span><span class="p">(</span><span class="n">valid_number</span><span class="o">.</span><span class="n">call</span><span class="p">)</span> <span class="p">{</span> <span class="n">array</span> <span class="p">{</span> <span class="n">valid_roll</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">let</span><span class="p">(</span><span class="ss">:rolls_invalid_number</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">sized</span><span class="p">(</span><span class="n">invalid_number</span><span class="o">.</span><span class="n">call</span><span class="p">)</span> <span class="p">{</span> <span class="n">array</span> <span class="p">{</span> <span class="n">valid_roll</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">let</span><span class="p">(</span><span class="ss">:rolls_invalid_roll</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="n">sized</span><span class="p">(</span><span class="n">valid_number</span><span class="o">.</span><span class="n">call</span><span class="p">)</span> <span class="p">{</span> <span class="n">array</span> <span class="p">{</span> <span class="n">invalid_roll</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;should be non-negative&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">property_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rolls</span><span class="p">)</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="mi">750</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">score</span> <span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;should be less than or equal to 1200&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">property_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rolls</span><span class="p">)</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="mi">750</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">score</span> <span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="o">&lt;=</span> <span class="mi">1200</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;should raise an error for an invalid number of rolls&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">property_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rolls_invalid_number</span><span class="p">)</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="mi">750</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">expect</span> <span class="p">{</span> <span class="n">score</span> <span class="n">r</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">it</span> <span class="s1">&#39;should raise an error for an invalid roll value&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">property_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rolls_invalid_roll</span><span class="p">)</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="mi">750</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">expect</span> <span class="p">{</span> <span class="n">score</span> <span class="n">r</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span> <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As often happens, property testing tends to suss out weird corner cases in your
code and help you understand it better.  Just while doing this example I
realized that <code>ArgumentError</code> wouldn’t necessarily be thrown for an invalid
roll <em>value</em> if the number of input rolls was actually empty.  Hence, the
addition of <code>if r.count &gt; 0</code> to the last test.</p>

<p>Property testing also subsumes unit tests.  If you use a static or relatively
static generator, you’re effectively <em>doing</em> unit testing.  You can see this in
the cases of the <code>invalid_roll</code> and <code>invalid_number</code> generators, in which each
is generating inputs from only a very small domain.</p>

<p>IMO familiarity with a QuickCheck-like property testing library is good to
have.  Rantly is not quite QuickCheck, but it’s still a joy to use.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes On Another Guy's Notes]]></title>
    <link href="http://jtobin.ca/blog/2014/03/07/notes-on-high-performance-browser-networking/"/>
    <updated>2014-03-07T08:22:20+10:00</updated>
    <id>http://jtobin.ca/blog/2014/03/07/notes-on-high-performance-browser-networking</id>
    <content type="html"><![CDATA[<p>I recently bought Ilya Grigorik’s <a href="http://www.amazon.com/High-Performance-Browser-Networking-performance/dp/1449344763">High Performance Browser Networking</a>, which is an excellent book.  Also excellent is that Ilya wrote <a href="http://www.igvita.com/2013/09/29/retrospective-high-performance-browser-networking/">a great retrospective</a> on his book-writing process.  </p>

<p>He made a few noteworthy points about the whole endeavour:</p>

<ul>
  <li>
    <p>A ‘shitty first draft’ is the initial goal of most any writing.  Just get to the keyboard and start mashing the keys.</p>
  </li>
  <li>
    <p><strong>Consistency is key</strong>.  Show up and get to work.</p>
  </li>
  <li>
    <p>Early feedback is invaluable.</p>
  </li>
  <li>
    <p>Incremental milestones and deadlines are helpful.  </p>
  </li>
  <li>
    <p>Writing is an excellent way to expose the initial sloppiness of one’s thinking.</p>
  </li>
</ul>

<p>I think these are all excellent insights, but the second and third ones really stand out to me.</p>

<p>Early and constant feedback is just <a href="https://www.youtube.com/watch?v=vQyrMMAbXgc">really important</a>.  This is something that I’ve had to constantly remind myself of when working on largely-solo projects.  Having others examine your work immediately gives you an idea of its promise.  Are the other parties excited by it?  Indifferent?  Confused?  Can they point out an area that you haven’t really understood all that well, or something important that you missed?</p>

<p>And above all else, <a href="http://jtobin.ca/blog/2014/01/27/the-unreasonable-effectiveness-of-habit/">consistency is sacrosanct</a>.  This idea is only getting reinforced with time. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Unreasonable Effectiveness of Habit]]></title>
    <link href="http://jtobin.ca/blog/2014/01/27/the-unreasonable-effectiveness-of-habit/"/>
    <updated>2014-01-27T14:41:16+10:00</updated>
    <id>http://jtobin.ca/blog/2014/01/27/the-unreasonable-effectiveness-of-habit</id>
    <content type="html"><![CDATA[<p>Exactly 41 days ago I started a project called <a href="http://750words.com">750 Words</a>,
which is simply a habit of writing a meagre 750 words every day.  They can be
written on anything; just pick a topic (or several topics) in your head and get
to writing about it.</p>

<p>When I originally started, I thought that this would be a great way to work on
blog posts, research papers, my dissertation, and so on.  Not so much the case,
I’ve found.  After much internal debate as to its merits (the subject of at
least one entry), the best use that I have found far 750 Words thus far has
been a complete mind dump every morning over breakfast.</p>

<p>Initially I tried rigorously picking a topic and writing essays and technical
entries or what have you, but this seemed to actually go against the spirit of
the exercise.  Nowadays I just open the browser and crank out whatever’s on my
mind.  It generally takes me about 15 minutes.</p>

<p>Why do I deem this to be a good use of my time?  More than anything, I think,
it has been by observing the results over time: I’ve sustained a streak now for
37 days straight, and quite enjoy waking up every day and putting another X on
the calendar by virtue of writing another entry.  I don’t want to stop, and
indeed, don’t intend to.  The main reward to me has been  seeing a basic goal
manifest as a string of X’s on a calendar; the little 750-word-minimum mind
dumps (which constitute over 32,000 words now) are a bonus.</p>

<!-- more -->

<p>I’d often heard about the <a href="http://lifehacker.com/281626/jerry-seinfelds-productivity-secret">‘chain’ method</a>
attributed to Jerry Seinfeld for boosting productivity, but kind of dismissed
it as ‘not a good fit’ for me (whatever that means).  I’ve been productive in
various endeavours by just <em>doing</em> the thing in question - playing musical
instruments, swimming, coding - without feeling I actually needed to resort to
keeping track of a formal chain or what have you.  Slavish devotion to schedule
is a bit foreign to me.  And,
<a href="http://calnewport.com/blog/2013/01/13/write-every-day-is-bad-advice-hacking-the-psychology-of-big-projects/">not everyone recommends it</a>.</p>

<p>When it comes to writing, however, the same approach hasn’t seemed to work.</p>

<p>I’ve always found technical writing to be a difficult task, and have
historically resorted to binging to get the job done.  But, binging on a
tough activity is unpleasant, unpleasant activities breed anxiety, anxiety
breeds procrastination, and procrastination leads to guilt.  The cycle is what
I would call ‘supremely sub-optimal’. </p>

<p>I read a great book about a week ago called <a href="http://www.amazon.com/How-Write-Lot-Practical-Productive-ebook/dp/B001Y35G60">How to Write a Lot</a>
which advocates as its primary advice <strong>allotting regular time to write, and
writing during that time</strong>.  In other words, enforcing a habit by slavish
devotion to schedule. </p>

<p>It has now been six days since I started forcing myself to specifically do some
technical writing for at least two hours a day, and marking an X down (using
<a href="http://dontbreakthechain.com">dontbreakthechain.com</a>) when that goal is
completed.  And, seemingly miraculously, much of a dissertation chapter has
materialized from thin air - sans the anxiety, procrastination, and guilt I
normally associate with working on it.</p>

<p>Of course, I’m only six days into this ‘habit’ of mine, so let’s see how long
it lasts in practice.  But, I really can’t imagine it going away: the decrease
in stress and accretion of results I’ve observed in only six days has been
amazing.  If I somehow start finding a two hour commitment too burdensome, I’ll
just knock it back to one hour instead.  And if that winds up being too
strenuous (in which case I probably have bigger problems to worry about) I can
go to thirty minutes or even less.</p>

<p><a href="http://en.wikipedia.org/wiki/The_Unreasonable_Effectiveness_of_Mathematics_in_the_Natural_Sciences">Math</a>
and <a href="http://research.google.com/pubs/archive/35179.pdf">data</a> are well-known to be
‘unreasonably effective’ in some sense, but habit just might be as well.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measures and Continuations]]></title>
    <link href="http://jtobin.ca/blog/2014/01/08/measures-and-continuations/"/>
    <updated>2014-01-08T13:32:05+10:00</updated>
    <id>http://jtobin.ca/blog/2014/01/08/measures-and-continuations</id>
    <content type="html"><![CDATA[<p>I’ve always been interested in measure theory.  I’m not even sure why, exactly.
Probably because it initially seemed so mysterious to me.  As an undergrad,
measure theory was this unknown, exotic key to <em>truly</em> understanding
probability.</p>

<p>Well, sort of.  It’s certainly the key to understanding formal probability,
but it no longer seems all that exotic, nor really necessary for grokking what
I’d call the true essence of probability.  It’s pretty much real analysis with
specialized attention paid to notions of factoring (independence) and ratios
(conditioning).  Nowadays I relate it moreso to accounting; not the most
inspiring of subjects, but necessary if you want to make sure everything adds
up the way you think it should.</p>

<!-- more -->

<p>Measures are just one of many structures that uniquely characterize probability
distributions, such as density functions, Fourier transforms, sampling
functions, and so on.  They’ve been considered to be particularly useful for
proving things, due to their generality.  They can be pretty abstract, but a
perfectly suitable analogy of a measure for most practical purposes is a
function that, when provided with a region, returns a volume.  Pretty simple.</p>

<p>Volume also tends to be synonymous with integration, in that given a (positive)
function, the integral of that function over some region defines a volume, or
‘area under the curve’.  For more general functions, integrals can be thought
of as returning a kind of center of mass.</p>

<p>Integration and measures go hand in hand.  In abstract integration, one
integrates a function over some region ‘against’ a measure, which assigns
particular weights to infinitesimals of the underlying space.  Measures that
tend to pop up in practice tend to be counting measure, Lebesgue measure, and
assorted image measures corresponding to particular probability distributions.</p>

<p>Imagine representing a measure on a computer.  One possible way to do it is to
represent a measure as an integral directly.  Or, rather, as a generic
<em>procedure</em> for integration.</p>

<p>Consider the setup where you pass a measurable function to an integration
procedure and it spits out a center of mass.  This has the convenient benefit
that the responsibility for preserving measurability can be delegated to the
function passed as an argument, rather than hard-coded into a measure itself
(which might be very hard to do).  Implemented in a type system - take
Haskell’s - we can implement a measure as something like</p>

<pre><code>newtype Measure a = Measure { measure :: (a -&gt; Double) -&gt; Double }
</code></pre>

<p>which is a wrapper over a measurable function that we want to integrate.</p>

<p>This is a restricted form of the <code>Cont</code> type used to define the continuation
monad.  That makes sense; we’re defining a measure to be a program that should
perform integration, and the particular implementation of that program defines
a particular measure.  If we’re willing to play things kind of fast and loose,
we can define measures by continuations proper:</p>

<pre><code>newtype Cont r a = Cont { runCont :: (a -&gt; r) -&gt; r }

instance Functor (Cont r) where
  fmap f c = Cont $ \g -&gt; runCont c (g . f)

instance Monad (Cont r) where
  return x = Cont $ \f -&gt; f x
  c &gt;&gt;= f  = Cont $ \d -&gt; runCont c $ \g -&gt; runCont (f g) d

type Measure a = Cont Double a
</code></pre>

<p>There are three immediately interesting things about this setup:</p>

<ul>
  <li><code>fmap</code> creates an image or pushforward measure by pushing a function onto an
existing measure</li>
  <li><code>return</code> is the Dirac measure at a point</li>
  <li><code>&gt;&gt;=</code> is a marginalizing operator</li>
</ul>

<p>There’s a big caveat in going this route: nonlinear continuation-y stuff like
<code>callCC</code> will break everything, so you can’t use it in the context of measures.
In practice defining a specific restricted type might be a bit safer, but we
can just avoid using it.</p>

<p>Usually we have something like $ \int f d\mathbb{P}$ in mathematical notation
to denote the integral of a function $ f $ against a measure $\mathbb{P}$, so
a more familiar version of <code>runCont</code> is</p>

<pre><code>integrate :: (a -&gt; Double) -&gt; Measure a -&gt; Double
integrate = flip runCont
</code></pre>

<p><code>integrate</code> defines the most basic ‘query’ of sorts on a measure.  You can
query a measure to find its volume, center of mass, and various higher-ordere
moments.  The simplest examples include:</p>

<pre><code>volume :: Measure a -&gt; Double
volume = integrate (const 1)

expectation :: Measure a -&gt; Double
expectation = integrate id

variance :: Measure a -&gt; Double
variance mu = integrate (^ 2) mu - expectation mu ^ 2
</code></pre>

<p>For any probability measure, <code>volume</code> should trivially return 1.</p>

<p>To create measures, you can put together functions like</p>

<pre><code>fromDensityCounting :: (a -&gt; Double) -&gt; [a] -&gt; Measure a
fromDensityLebesgue :: (Double -&gt; Double) -&gt; Measure Double
fromObservations    :: [a] -&gt; Measure a
</code></pre>

<p>that will create measures from the appropriate underlying structures. 
<code>fromObservations</code> is probably the most interesting, being the least
restrictive of the three.  You could also implement <code>fromSamplingFunction</code> to
create a (random) measure from a sampling function and a seed.</p>

<p>It’s easy to define stuff like abstract addition, subtraction, and
multiplication on measures.  Just use <code>liftM2</code> and your arithmetic operator of
choice.  In particular, abstract addition of measures corresponds to
measure convolution.</p>

<p>Viewing measures in this way is kind of neat, if of questionable practical
value.  You can see a implementation of this stuff
<a href="http://github.com/jtobin/measurable">here</a>, which includes a few examples to
boot.  But in practice, you can’t seem to get very far with an implementation
like this.  Exact computation involving probabilities is always going to be
limited to toy cases.  One of the key morals of <a href="http://web.mit.edu/vkm/www/vkm-dissertation.pdf">Vikash Mansinghka’s excellent
dissertation</a>, relevant here,
is “don’t compute probabilities; instead, sample good guesses”.  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic EC2 Management with Ansible]]></title>
    <link href="http://jtobin.ca/blog/2013/12/21/basic-ec2-management-with-ansible/"/>
    <updated>2013-12-21T14:26:56+10:00</updated>
    <id>http://jtobin.ca/blog/2013/12/21/basic-ec2-management-with-ansible</id>
    <content type="html"><![CDATA[<p>EC2 is cool.  The ability to dynamically spin up a whack of free-to-cheap
server instances anywhere in the world at any time, is.. well, pretty mean.
Need to run a long computation job?  Scale up a distributed system?  Reduce
latency to clients in a particular geographical region?  YEAH WE CAN DO THAT.</p>

<p>The EC2 Management Console is a pretty great tool in of itself.  Well laid-out
and very responsive.  But for a hacker’s hacker, a great tool to manage EC2
instances (amongst other things) is Ansible, which provides a way to automate
tasks over an arbitrary number of servers, concurrently.</p>

<p>With EC2 and Ansible you can rapidly find yourself controlling an amorphous,
globally-distributed network of servers that are eager to do your bidding.</p>

<p><img src="http://i.imgur.com/EE2uqkU.jpg" /></p>

<p>Again.. pretty mean. </p>

<!-- more -->

<p>Here’s a quick example that elides most of the nitty-gritty details.  I’m going
to spin up three micro instances in Asia Pacific.  To do that, I’m going to use
an Ansible playbook, which is essentially a YAML file that describes a sequence
of commands to be performed.  I’m going to delegate my local machine to handle
that task, so I’m first going to store the following inventory in
/etc/ansible/local:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="p-Indicator">[</span><span class="nv">localhost</span><span class="p-Indicator">]</span>
</span><span class="line"><span class="l-Scalar-Plain">127.0.0.1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following playbook is what actually launches these guys.  Here’s its
header:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spin-up-instances.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Spin up some EC2 instances</span>
</span><span class="line">  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
</span><span class="line">  <span class="l-Scalar-Plain">connection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">local</span>
</span><span class="line">  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Create security group</span>
</span><span class="line">      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="l-Scalar-Plain">module</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ec2_group</span>
</span><span class="line">        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-security-group</span>
</span><span class="line">        <span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Access my-security-group</span>
</span><span class="line">        <span class="l-Scalar-Plain">region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ap-southeast-2</span>
</span><span class="line">        <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class="line">          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">proto</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tcp</span>
</span><span class="line">            <span class="l-Scalar-Plain">from_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">22</span>
</span><span class="line">            <span class="l-Scalar-Plain">to_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">22</span>
</span><span class="line">            <span class="l-Scalar-Plain">cidr_ip</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0.0.0/0</span>
</span><span class="line">
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Launch instances</span>
</span><span class="line">      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="l-Scalar-Plain">module</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ec2</span>
</span><span class="line">        <span class="l-Scalar-Plain">region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ap-southeast-2</span>
</span><span class="line">        <span class="l-Scalar-Plain">keypair</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jtobin-aws</span>
</span><span class="line">        <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-security-group</span>
</span><span class="line">        <span class="l-Scalar-Plain">instance_type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">t1.micro</span>
</span><span class="line">        <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ami-3d128f07</span>
</span><span class="line">        <span class="l-Scalar-Plain">count</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class="line">        <span class="l-Scalar-Plain">wait</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class="line">      <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ec2</span>
</span><span class="line">
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Add instances to host group</span>
</span><span class="line">      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">add_host hostname= groupname=my-security-group</span>
</span><span class="line">      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ec2.instances</span>
</span><span class="line">
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Tag instances</span>
</span><span class="line">      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ec2_tag resource= region=ap-southeast-2 state=present</span>
</span><span class="line">      <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ec2.instances</span>
</span><span class="line">      <span class="l-Scalar-Plain">args</span><span class="p-Indicator">:</span>
</span><span class="line">        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class="line">          <span class="l-Scalar-Plain">Name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Abrek</span>
</span><span class="line">
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Give everyone a minute</span>
</span><span class="line">      <span class="l-Scalar-Plain">pause</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">minutes=1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Roughly, the tasks I want performed are each declared with a name and follow
the ‘tasks:’ line.  They’re relatively self-explanatory.  When Ansible runs
this playbook, it will execute the tasks in the order they appear in the
playbook.</p>

<p>First I create a security group in Asia Pacific (Sydney) for all the instances
I want to launch, and then go ahead and actually launch the instances.  You can
see that I launch them as a local action on my machine.  I’m using micro
instances (the most lightweight instance type available) and pick an Ubuntu LTS
Server machine image for each.  I then do some bookkeeping and tag each
instance with the name ‘Abrek’.  The final task just pauses the playbook
execution long enough for the instances to get up and running.</p>

<p>Fun fact: ‘Abrek’ was the name of one of the first two Soviet monkeys shot into
space.  Today is apparently the 30th anniversary of his safe return.</p>

<p>Now, I also want to install some software on each of these guys.  I’ll separate
all that into two groups: some essentials, and a specialized stack consisting
of 0MQ and supporting libraries.  To do that, I’ll create two separate files
called ‘install-essentials.yml’ and ‘install-specialized.yml’.</p>

<p>I’ll keep the essentials bare for now: git, gcc/g++, and make.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>install-essentials.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install git</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=git update_cache=yes</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install gcc</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=gcc</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install g++</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=g++</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install make</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=make</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I can grab all of those via apt.  ‘update_cache’ is equivalent to ‘apt-get
update’, which only needs to be done once.</p>

<p>Next, the specialized stuff:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>install-specialized.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Grab 0MQ</span>
</span><span class="line">  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">wget http://download.zeromq.org/zeromq-4.0.3.tar.gz</span>
</span><span class="line">    <span class="no">creates=zeromq-4.0.3.tar.gz</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Unpack 0MQ</span>
</span><span class="line">  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">tar -xzf zeromq-4.0.3.tar.gz</span>
</span><span class="line">    <span class="no">creates=zeromq-4.0.3</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Get libsodium</span>
</span><span class="line">  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">wget https://download.libsodium.org/libsodium/releases/libsodium-0.4.5.tar.gz</span>
</span><span class="line">    <span class="no">creates=libsodium-0.4.5</span>
</span><span class="line">    <span class="no">chdir=zeromq-4.0.3</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install libsodium</span>
</span><span class="line">  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">tar xzf libsodium-0.4.5.tar.gz;</span>
</span><span class="line">    <span class="no">cd libsodium-0.4.5;</span>
</span><span class="line">    <span class="no">./configure &amp;&amp; make &amp;&amp; make check &amp;&amp; make install</span>
</span><span class="line">    <span class="no">chdir=zeromq-4.0.3</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install 0MQ</span>
</span><span class="line">  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">./configure; make; make install</span>
</span><span class="line">    <span class="no">chdir=zeromq-4.0.3</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install libtool</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=libtool</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install automake</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=automake</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install automake</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=autoconf</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install uuid-dev</span>
</span><span class="line">  <span class="l-Scalar-Plain">apt</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=uuid-dev</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Grab CZMQ</span>
</span><span class="line">  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">wget http://download.zeromq.org/czmq-2.0.3.tar.gz</span>
</span><span class="line">    <span class="no">creates=czmq-2.0.3.tar.gz</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Unpack CZMQ</span>
</span><span class="line">  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">tar xzf czmq-2.0.3.tar.gz</span>
</span><span class="line">    <span class="no">creates=czmq-2.0.3</span>
</span><span class="line">
</span><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install CZMQ</span>
</span><span class="line">  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class="line">    <span class="no">./configure &amp;&amp; make;</span>
</span><span class="line">    <span class="no">ldconfig</span>
</span><span class="line">    <span class="no">chdir=czmq-2.0.3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lots going on here.  I use a variety of apt and shell commands to download and
install everything I need.</p>

<p>Now to add those tasks back into the ‘spin-up-instances.yml’ playbook so that
the software gets installed right after the instances boot up.  I can append
the following to that file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spin-up-instances.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install essential and specialized software</span>
</span><span class="line">  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-security-group</span>
</span><span class="line">  <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu</span>
</span><span class="line">  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">True</span>
</span><span class="line">  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">include</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tasks/install-essentials.yml</span>
</span><span class="line">    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">include</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tasks/install-specialized.yml</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s run the playbook and see those instances get launched.  I need to use the
‘local’ inventory that I set up, so I pass that to ‘ansible-playbook’
explicitly.</p>

<p>Running it, we can see the security group being created, the instances popping
up, and tags getting assigned:</p>

<p><img src="http://jtobin.ca/images/ansible-first.png" /></p>

<p>Our essential software getting pulled down:</p>

<p><img src="http://jtobin.ca/images/ansible-third.png" /></p>

<p>And the tail end of our 0MQ stack showing up before the play ends with a
summary.</p>

<p><img src="http://jtobin.ca/images/ansible-fourth.png" /></p>

<p>For a quick sanity check to ensure that everything really did go as planned, I
can look for the CZMQ header on each instance.  This time I’ll run a quick
ad-hoc command, identifying the hosts via the ‘Abrek’ tag:</p>

<p><img src="http://jtobin.ca/images/ansible-fifth.png" /></p>

<p>Voila, three servers ready to roll.  Great stuff.</p>

<p>To fill the missing details, you might want to check out the excellent <a href="http://www.ansibleworks.com/docs/">Ansible
documentation</a>, as well as the great
tutorials at <a href="http://http://answersforaws.com/">AnswersForAws</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Learning as a Side Project]]></title>
    <link href="http://jtobin.ca/blog/2013/12/20/side-projects/"/>
    <updated>2013-12-20T12:12:02+10:00</updated>
    <id>http://jtobin.ca/blog/2013/12/20/side-projects</id>
    <content type="html"><![CDATA[<p>I regularly find myself wanting to learn too many things at once.  This might
be justifiable in some sense; there’s an awful lot out there to learn.  Often,
skimming over some topic or other feels like enough to develop a sufficiently
high-level model of what it is or how it works.  Armed with that (dangerously
small amount of) knowledge, however, the urge to pick up some other topic tends
to arise..  and so the process repeats.</p>

<p>This is all well and good in order to survey what’s out there, but left
unchecked, a survey of topics is all one might get.  <em>Le dilettantisme</em> can be
understandable, but never desirable.</p>

<p>Some time ago, I decided to try restricting myself to learning only one
particular topic for two weeks at a time, as a bit of a side project.  Think of
it as a ‘learning sprint’, if you will.  The idea is that the time between
iterations is sufficiently short to ensure that one can’t hunger too badly to
switch to some other topic mid-sprint.  At the same time, each iteration is
lengthy enough to ensure a reasonable amount of immersion and depth.</p>

<p>I managed a single iteration, but due to travel and a lack of conviction about
the whole thing, never started another.  I think I’m going to start again, but
with a little more intent this time.</p>

<p>Two weeks can be a long-as time for some topics, though, so I believe I’ll work
in one-to-two week commitments, depending on the subject.</p>

<p>To start, I’m going to choose <a href="http://zeromq.org/">0MQ</a>, a framework that I
sort-of know and definitely love.  We’ve used it in production on a previous
app I worked on, and I’ve even contributed to the official Ruby bindings.  But,
I still have a lot to learn about it.</p>

<p>So let’s see how it goes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A new blog]]></title>
    <link href="http://jtobin.ca/blog/2013/12/17/a-new-blog/"/>
    <updated>2013-12-17T07:46:26+10:00</updated>
    <id>http://jtobin.ca/blog/2013/12/17/a-new-blog</id>
    <content type="html"><![CDATA[<p>I’ve been feeling an itch to write more often, and this seems as good a place
as any to do it.  If anything here winds up being useful to anyone else, all
the better.</p>

]]></content>
  </entry>
  
</feed>
