<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: infrastructure | jtobin.ca]]></title>
  <link href="http://jtobin.ca/blog/categories/infrastructure/atom.xml" rel="self"/>
  <link href="http://jtobin.ca/"/>
  <updated>2014-07-07T23:43:50-02:30</updated>
  <id>http://jtobin.ca/</id>
  <author>
    <name><![CDATA[Jared Tobin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Synchronous Remote Collaboration]]></title>
    <link href="http://jtobin.ca/blog/2014/06/01/quick-remote-pairing/"/>
    <updated>2014-06-01T04:00:48-02:30</updated>
    <id>http://jtobin.ca/blog/2014/06/01/quick-remote-pairing</id>
    <content type="html"><![CDATA[<p>I don’t really do a ton of pair programming.  By the nature of my work and
geographical location I tend to work i) largely independently ii) on small
teams iii) consisting of people who live about a dozen time zones away from me.</p>

<p>I would <em>like</em> to do more, or at least try it out a bit more.  In the past I’ve
done it very occasionally while trying to pick up something completely new from
an expert, but I think the experience would be more valuable while working on
something familiar but tough, or even just for a change of pace now and then.</p>

<p>In the past I’ve used <a href="http://join.me" title="join.me">join.me</a> for screen sharing plus voice.  I found
it to be lighter-weight and better quality than Skype.  But that already seems
to be a bit old-fashioned nowadays; I’ve since taken to using Hangouts for most
of my calls, and I’d rather be able to work with people more interactively than
screen sharing will allow.</p>

<p>Since servers/instances on your cloud provider of choice are so cheap and easy
to manage these days, I decided to put together a quick pairing environment
using <a href="http://www.vagrantup.com" title="Vagrant">Vagrant</a>, <a href="http://aws.amazon.com" title="AWS CLI">AWS</a>, <a href="http://www.ansible.com/home" title="Ansible">Ansible</a>, and <a href="http://tmux.sourceforge.net/" title="tmux">tmux</a>.  The idea is that
when you’d like to collaborate with someone or other, you just quickly fire up
a cloud instance with all your favourite junk on it, ssh (or mosh) in, and get
right to work in a familiar environment.  Everyone connects to the same tmux
session on an ephemereal cloud instance, which is then just halted or destroyed
as soon as you get bored of each others’ company.</p>

<p>I’ve created a Github repo <a href="https://github.com/jtobin/pair-up" title="pair-up">here</a> that hopefully makes it quite easy to get
this setup going.  Feel free to use that as a base for your own setup if you’d
like to try it for yourself.  It’s even pretty much plug and play so long as
you enjoy vim, tmux, and all of my configuration settings (ps, I re-bind the
tmux prefix to C-s).</p>

<p>TODO: build a custom AMI to dodge the long provisioning waits.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic EC2 Management with Ansible]]></title>
    <link href="http://jtobin.ca/blog/2013/12/21/basic-ec2-management-with-ansible/"/>
    <updated>2013-12-21T00:56:56-03:30</updated>
    <id>http://jtobin.ca/blog/2013/12/21/basic-ec2-management-with-ansible</id>
    <content type="html"><![CDATA[<p>EC2 is cool.  The ability to dynamically spin up a whack of free-to-cheap
server instances anywhere in the world at any time, is.. well, pretty mean.
Need to run a long computation job?  Scale up a distributed system?  Reduce
latency to clients in a particular geographical region?  YEAH WE CAN DO THAT.</p>

<p>The EC2 Management Console is a pretty great tool in of itself.  Well laid-out
and very responsive.  But for a hacker’s hacker, a great tool to manage EC2
instances (amongst other things) is Ansible, which provides a way to automate
tasks over an arbitrary number of servers, concurrently.</p>

<p>With EC2 and Ansible you can rapidly find yourself controlling an amorphous,
globally-distributed network of servers that are eager to do your bidding.</p>

<p><img src="http://i.imgur.com/EE2uqkU.jpg"></p>

<p>Again.. pretty mean. </p>

<!-- more -->

<p>Here’s a quick example that elides most of the nitty-gritty details.  I’m going
to spin up three micro instances in Asia Pacific.  To do that, I’m going to use
an Ansible playbook, which is essentially a YAML file that describes a sequence
of commands to be performed.  I’m going to delegate my local machine to handle
that task, so I’m first going to store the following inventory in
/etc/ansible/local:</p>

<p><code>yaml
[localhost]
127.0.0.1
</code></p>

<p>The following playbook is what actually launches these guys.  Here’s its
header:</p>

<h2 id="yaml-spin-up-instancesyml">``` yaml spin-up-instances.yml</h2>
<ul>
  <li>name: Spin up some EC2 instances
hosts: 127.0.0.1
connection: local
tasks:
    <ul>
      <li>
        <p>name: Create security group
local_action:
  module: ec2_group
  name: my-security-group
  description: Access my-security-group
  region: ap-southeast-2
  rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0</p>
      </li>
      <li>
        <p>name: Launch instances
local_action:
  module: ec2
  region: ap-southeast-2
  keypair: jtobin-aws
  group: my-security-group
  instance_type: t1.micro
  image: ami-3d128f07
  count: 3
  wait: yes
register: ec2</p>
      </li>
      <li>
        <p>name: Add instances to host group
local_action: add_host hostname= groupname=my-security-group
with_items: ec2.instances</p>
      </li>
      <li>
        <p>name: Tag instances
local_action: ec2_tag resource= region=ap-southeast-2 state=present
with_items: ec2.instances
args:
  tags:
    Name: Abrek</p>
      </li>
      <li>
        <p>name: Give everyone a minute
pause: minutes=1
```</p>
      </li>
    </ul>
  </li>
</ul>

<p>Roughly, the tasks I want performed are each declared with a name and follow
the ‘tasks:’ line.  They’re relatively self-explanatory.  When Ansible runs
this playbook, it will execute the tasks in the order they appear in the
playbook.</p>

<p>First I create a security group in Asia Pacific (Sydney) for all the instances
I want to launch, and then go ahead and actually launch the instances.  You can
see that I launch them as a local action on my machine.  I’m using micro
instances (the most lightweight instance type available) and pick an Ubuntu LTS
Server machine image for each.  I then do some bookkeeping and tag each
instance with the name ‘Abrek’.  The final task just pauses the playbook
execution long enough for the instances to get up and running.</p>

<p>Fun fact: ‘Abrek’ was the name of one of the first two Soviet monkeys shot into
space.  Today is apparently the 30th anniversary of his safe return.</p>

<p>Now, I also want to install some software on each of these guys.  I’ll separate
all that into two groups: some essentials, and a specialized stack consisting
of 0MQ and supporting libraries.  To do that, I’ll create two separate files
called ‘install-essentials.yml’ and ‘install-specialized.yml’.</p>

<p>I’ll keep the essentials bare for now: git, gcc/g++, and make.</p>

<h2 id="yaml-install-essentialsyml">``` yaml install-essentials.yml</h2>
<ul>
  <li>
    <p>name: Install git
apt: pkg=git update_cache=yes</p>
  </li>
  <li>
    <p>name: Install gcc
apt: pkg=gcc</p>
  </li>
  <li>
    <p>name: Install g++
apt: pkg=g++</p>
  </li>
  <li>
    <p>name: Install make
apt: pkg=make
```</p>
  </li>
</ul>

<p>I can grab all of those via apt.  ‘update_cache’ is equivalent to ‘apt-get
update’, which only needs to be done once.</p>

<p>Next, the specialized stuff:</p>

<h2 id="yaml-install-specializedyml">``` yaml install-specialized.yml</h2>
<ul>
  <li>
    <p>name: Grab 0MQ
command: &gt;
  wget http://download.zeromq.org/zeromq-4.0.3.tar.gz
  creates=zeromq-4.0.3.tar.gz</p>
  </li>
  <li>
    <p>name: Unpack 0MQ
command: &gt;
  tar -xzf zeromq-4.0.3.tar.gz
  creates=zeromq-4.0.3</p>
  </li>
  <li>
    <p>name: Get libsodium
command: &gt;
  wget https://download.libsodium.org/libsodium/releases/libsodium-0.4.5.tar.gz
  creates=libsodium-0.4.5
  chdir=zeromq-4.0.3</p>
  </li>
  <li>
    <p>name: Install libsodium
shell: &gt;
  tar xzf libsodium-0.4.5.tar.gz;
  cd libsodium-0.4.5;
  ./configure &amp;&amp; make &amp;&amp; make check &amp;&amp; make install
  chdir=zeromq-4.0.3</p>
  </li>
  <li>
    <p>name: Install 0MQ
shell: &gt;
  ./configure; make; make install
  chdir=zeromq-4.0.3</p>
  </li>
  <li>
    <p>name: Install libtool
apt: pkg=libtool</p>
  </li>
  <li>
    <p>name: Install automake
apt: pkg=automake </p>
  </li>
  <li>
    <p>name: Install automake
apt: pkg=autoconf </p>
  </li>
  <li>
    <p>name: Install uuid-dev
apt: pkg=uuid-dev </p>
  </li>
  <li>
    <p>name: Grab CZMQ
command: &gt;
  wget http://download.zeromq.org/czmq-2.0.3.tar.gz
  creates=czmq-2.0.3.tar.gz</p>
  </li>
  <li>
    <p>name: Unpack CZMQ
command: &gt;
  tar xzf czmq-2.0.3.tar.gz
  creates=czmq-2.0.3</p>
  </li>
  <li>
    <p>name: Install CZMQ
shell: &gt;
  ./configure &amp;&amp; make;
  ldconfig
  chdir=czmq-2.0.3
```</p>
  </li>
</ul>

<p>Lots going on here.  I use a variety of apt and shell commands to download and
install everything I need.</p>

<p>Now to add those tasks back into the ‘spin-up-instances.yml’ playbook so that
the software gets installed right after the instances boot up.  I can append
the following to that file:</p>

<p><code>yaml spin-up-instances.yml
- name: Install essential and specialized software
  hosts: my-security-group
  user: ubuntu
  sudo: True
  tasks:
    - include: tasks/install-essentials.yml
    - include: tasks/install-specialized.yml
</code></p>

<p>Let’s run the playbook and see those instances get launched.  I need to use the
‘local’ inventory that I set up, so I pass that to ‘ansible-playbook’
explicitly.</p>

<p>Running it, we can see the security group being created, the instances popping
up, and tags getting assigned:</p>

<p><img src="/images/ansible-first.png"></p>

<p>Our essential software getting pulled down:</p>

<p><img src="/images/ansible-third.png"></p>

<p>And the tail end of our 0MQ stack showing up before the play ends with a
summary.</p>

<p><img src="/images/ansible-fourth.png"></p>

<p>For a quick sanity check to ensure that everything really did go as planned, I
can look for the CZMQ header on each instance.  This time I’ll run a quick
ad-hoc command, identifying the hosts via the ‘Abrek’ tag:</p>

<p><img src="/images/ansible-fifth.png"></p>

<p>Voila, three servers ready to roll.  Great stuff.</p>

<p>To fill the missing details, you might want to check out the excellent <a href="http://www.ansibleworks.com/docs/">Ansible
documentation</a>, as well as the great
tutorials at <a href="http://http://answersforaws.com/">AnswersForAws</a>.</p>

]]></content>
  </entry>
  
</feed>
